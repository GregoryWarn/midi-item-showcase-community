{
  "folder": null,
  "name": "Snare",
  "type": "spell",
  "img": "icons/magic/nature/root-vine-thorned-coil-green.webp",
  "system": {
    "description": {
      "value": "<h2 style=\"box-sizing:border-box;user-select:text;scrollbar-width:thin;scrollbar-color:var(--color-scrollbar) var(--color-scrollbar-track);margin:0px 0px 0.5rem;padding:0px;font-weight:normal;font-size:1.5em;border-bottom:1px solid var(--color-underline-header);color:rgb(25, 24, 19);font-family:Signika, sans-serif;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial\"><span style=\"font-family:Signika, sans-serif\">Made by Quinn Dexter</span></h2><h3 style=\"box-sizing:border-box;user-select:text;scrollbar-width:thin;scrollbar-color:var(--color-scrollbar) var(--color-scrollbar-track);margin:0px 0px 0.5rem;padding:0px;font-weight:normal;font-size:1.25em;border-bottom:none;color:rgb(25, 24, 19);font-family:Signika, sans-serif;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial\"><span style=\"font-family:Signika, sans-serif\">Requires:</span></h3><ul style=\"box-sizing:border-box;user-select:text;scrollbar-width:thin;scrollbar-color:var(--color-scrollbar) var(--color-scrollbar-track);margin:0.5em 0px;padding:0px 0px 0px 1.5em;color:rgb(25, 24, 19);font-family:Signika, sans-serif;font-size:13px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial\"><li style=\"box-sizing:border-box;user-select:text;scrollbar-width:thin;scrollbar-color:var(--color-scrollbar) var(--color-scrollbar-track)\"><p style=\"box-sizing:border-box;user-select:text;scrollbar-width:thin;scrollbar-color:var(--color-scrollbar) var(--color-scrollbar-track);margin:0.5em 0px;margin-block-end:0px\"><span style=\"font-family:Signika, sans-serif\">Region Attacher</span></p></li><li style=\"box-sizing:border-box;user-select:text;scrollbar-width:thin;scrollbar-color:var(--color-scrollbar) var(--color-scrollbar-track)\"><p>Cauldron of Plentiful Resources</p></li></ul>",
      "chat": ""
    },
    "source": {
      "custom": ""
    },
    "activation": {
      "type": "minute",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "8",
      "units": "hour"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": "5",
      "width": null,
      "units": "ft",
      "type": "sphere",
      "prompt": true
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": "",
      "prompt": true
    },
    "consume": {
      "type": "material",
      "target": "Y5Z8H4UwJ2PNVq98",
      "amount": 1,
      "scale": false
    },
    "ability": "",
    "actionType": "util",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "abj",
    "materials": {
      "value": "25 feet of cord or rope, which is consumed by the spell",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "properties": [
      "somatic",
      "material"
    ],
    "attack": {
      "bonus": "",
      "flat": false
    },
    "summons": null,
    "sourceClass": "",
    "enchantment": null
  },
  "effects": [],
  "flags": {
    "scene-packer": {
      "hash": "0a06bcd204dc7083bf754e412f44c385eb9670c3",
      "sourceId": "Item.LEzToSuUtq6sKKSW"
    },
    "tidy5e-sheet": {
      "favorite": false
    },
    "custom-character-sheet-sections": {
      "sectionName": ""
    },
    "midi-qol": {
      "effectActivation": false,
      "AoETargetType": "any",
      "AoETargetTypeIncludeSelf": true,
      "autoTarget": "default",
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "effectCondition": ""
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "rollOther": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": true,
      "concentration": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "confirmTargets": "default",
      "noConcentrationCheck": false,
      "idr": false,
      "idi": false,
      "idv": false,
      "ida": false
    },
    "templatemacro": {
      "whenTurnEnd": {
        "asGM": false,
        "command": "/*This Macro makes an automated dexterity saving throw at the end of the token effected. If the saving throw is successful, the\ncondition restrained is removed and the template is removed**/\n\n//if game is not in comabt the dexterity roll needs to be done manually.\nif (!game.combat) {\n    console.log(\"Game not in combat mode. Disabling Turn End Macro.\");\n    return;\n}\n\nconst sourceActor = getSourceActor(template);\nconst targetActor = token.actor;\n\n//Create a chat message for flair\nlet cMessage = targetActor?.name + \" tries to get out of the trap.\";\nChatMessage.create({ content: cMessage });\n\n// Do the dexterity save check\nlet saveRollResult = await targetActor.rollAbilitySave('dex');\nlet spellDCCheckPassed = (saveRollResult.total >= getSpellDC(sourceActor));\n\n//Checks whether the dexterity saving throw was successful\nif (spellDCCheckPassed) {\n    //Only the condition \"restrained\" is removed, as the character is still prone when the trap has been disabled.\n    await removeCondition(targetActor, \"Restrained\");\n    await removeTrap(sourceActor, template);\n    let cMessage = targetActor?.name + \" achieved to get out of the magical trap of \" + sourceActor.name + \" and falls prone to the ground.\";\n    ChatMessage.create({ content: cMessage });\n} else {\n    let cMessage = targetActor?.name + \" did not acieve to get out of the magical trap of \" + sourceActor.name + \" and still hangs in the air.\";\n    ChatMessage.create({ content: cMessage });\n}\n\n// Removes a condition to an actor. Parameters overlay and orogin are not used, but keep them for further implementations\nasync function removeCondition(actor, name, overlay, origin) {\n    if (await game.dfreds.effectInterface.hasEffectApplied(name, actor.uuid)) {\n        await game.dfreds.effectInterface.removeEffect(\n            {\n                'effectName': name,\n                'uuid': actor.uuid,\n                'origin': origin,\n                'overlay': overlay\n            }\n        )\n    }\n}\n\n//Get spell dc of the avtor\nfunction getSpellDC(sourceActor) {\n    const spellDC = sourceActor?.system.attributes.spelldc;\n    return spellDC;\n}\n\n//Get the actor responsible for the template\nfunction getSourceActor(sourceTemplate) {\n    let sourceActor;\n    let sourceUuid = sourceTemplate?.getFlag(\"midi-qol\", \"originUuid\").split(\".\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = sourceTemplate?.getFlag(\"dnd5e\", \"origin\").split(\".\");\n    }\n\n    //hoping, that the actor id is on position 1 in the array\n    if (sourceUuid[0] === \"Actor\") {\n\n        sourceActor = game.actors.get(sourceUuid[1]);\n    }\n    return sourceActor;\n}\n\n\n//Removes the Snare active effect from the caster\nasync function removeTrap(trapActor, trapTemplate) {\n    const activeEffects = trapActor.effects;\n    let activeEffectsToDelete = [];\n\n    let sourceUuid = trapTemplate?.getFlag(\"midi-qol\", \"originUuid\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = trapTemplate?.getFlag(\"dnd5e\", \"origin\");\n    }\n\n    const activeSnareEffects = activeEffects.filter(effectOrigin => effectOrigin.origin === sourceUuid);\n    for (let i = 0; i < activeSnareEffects.length; i++) {\n        activeEffectsToDelete.push(activeSnareEffects[i].id);\n    }\n    await trapActor.deleteEmbeddedDocuments(\"ActiveEffect\", activeEffectsToDelete);\n}\n\n"
      },
      "whenThrough": {
        "asGM": false,
        "command": "//If the entering event has been triggered by a forced move, when walking through the template, do not execute this macro again\nif (template.getFlag(\"world\", \"snareTrapTriggered\")) {\n    return\n}\n\nconst sourceActor = getSourceActor(template);\nconst targetActor = token.actor;\n\n//Create a chat message for flair\nlet cMessage = targetActor?.name + \" steppd on the magical trap of \" + sourceActor?.name + \"! Let's see what happens.\";\nChatMessage.create({ content: cMessage });\n\n// Do the dexterity save check\nlet saveRollResult = await targetActor.rollAbilitySave('dex');\nlet spellDCCheckPassed = (saveRollResult.total >= getSpellDC(sourceActor));\n\n//If saved, nothing happens only a nice chate message. If not, target is set to prone and restrained,\n//moved 3 feetd higher and the trap is removed\nif (spellDCCheckPassed) {\n    let cMessage = targetActor?.name + \" saved and walks therefore elegantly over the trap.\"\n    ChatMessage.create({ content: cMessage });\n} else {\n    let cMessage = targetActor?.name + \" did not achieve to pass the trap safely, falls prone and is pulled into the air.\"\n    ChatMessage.create({ content: cMessage });\n    //Uncomment this line for the \"wentThrough\" hook\n    await moveTokenToTemplate (token, template);\n    await addCondition(targetActor, \"Prone\");\n    await addCondition(targetActor, \"Restrained\");\n    const newElevation = token.document.elevation + 3;\n    await token.document.update({ elevation: newElevation });\n}\n\n\n// Adds a condition to an actor\nasync function addCondition(actor, name, overlay, origin) {\n    if (!(await game.dfreds.effectInterface.hasEffectApplied(name, actor.uuid))) {\n        await game.dfreds.effectInterface.addEffect(\n            {\n                'effectName': name,\n                'uuid': actor.uuid,\n                'origin': origin,\n                'overlay': overlay\n            }\n        )\n    }\n}\n\n//ONly calles in the \nasync function moveTokenToTemplate(tokenToMove, targetTemplate) {\n    await targetTemplate.setFlag('world', 'snareTrapTriggered', true);\n    const newTokenPos = { x: targetTemplate.x - (canvas.grid.size * tokenToMove.document.width / 2), y: targetTemplate.y - (canvas.grid.size * tokenToMove.document.height / 2) };\n    await token.document.update(newTokenPos);\n}\n\n\n//Get spell dc of the avtor\nfunction getSpellDC(sourceActor) {\n    const spellDC = sourceActor?.system.attributes.spelldc;\n    return spellDC;\n}\n\n//Get the actor responsible for the template\nfunction getSourceActor(sourceTemplate) {\n    let sourceActor;\n    let sourceUuid = sourceTemplate?.getFlag(\"midi-qol\", \"originUuid\").split(\".\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = sourceTemplate?.getFlag(\"dnd5e\", \"origin\").split(\".\");\n    }\n\n    //hoping, that the actor id is on position 1 in the array\n    if (sourceUuid[0] === \"Actor\") {\n\n        sourceActor = game.actors.get(sourceUuid[1]);\n    }\n    return sourceActor;\n}\n"
      },
      "whenEntered": {
        "asGM": false,
        "command": "//If the entering event has been triggered by a forced move, when walking through the template, do not execute this macro again\nif (template.getFlag(\"world\", \"snareTrapTriggered\")) {\n    return\n}\n\nconst sourceActor = getSourceActor(template);\nconst targetActor = token.actor;\n\n//Create a chat message for flair\nlet cMessage = targetActor?.name + \" steppd on the magical trap of \" + sourceActor?.name + \"! Let's see what happens.\";\nChatMessage.create({ content: cMessage });\n\n// Do the dexterity save check\nlet saveRollResult = await targetActor.rollAbilitySave('dex');\nlet spellDCCheckPassed = (saveRollResult.total >= getSpellDC(sourceActor));\n\n//If saved, nothing happens only a nice chate message. If not, target is set to prone and restrained,\n//moved 3 feetd higher and the trap is removed\nif (spellDCCheckPassed) {\n    let cMessage = targetActor?.name + \" saved and walks therefore elegantly over the trap.\"\n    ChatMessage.create({ content: cMessage });\n} else {\n    let cMessage = targetActor?.name + \" did not achieve to pass the trap safely, falls prone and is pulled into the air.\"\n    ChatMessage.create({ content: cMessage });\n    //Uncomment this line for the \"wentThrough\" hook\n    //await moveTokenToTemplate (token, template);\n    await addCondition(targetActor, \"Prone\");\n    await addCondition(targetActor, \"Restrained\");\n    const newElevation = token.document.elevation + 3;\n    await token.document.update({ elevation: newElevation });\n}\n\n\n// Adds a condition to an actor\nasync function addCondition(actor, name, overlay, origin) {\n    if (!(await game.dfreds.effectInterface.hasEffectApplied(name, actor.uuid))) {\n        await game.dfreds.effectInterface.addEffect(\n            {\n                'effectName': name,\n                'uuid': actor.uuid,\n                'origin': origin,\n                'overlay': overlay\n            }\n        )\n    }\n}\n\n//ONly calles in the \nasync function moveTokenToTemplate(tokenToMove, targetTemplate) {\n    await targetTemplate.setFlag('world', 'snareTrapTriggered', true);\n    const newTokenPos = { x: targetTemplate.x - (canvas.grid.size * tokenToMove.document.width / 2), y: targetTemplate.y - (canvas.grid.size * tokenToMove.document.height / 2) };\n    await token.document.update(newTokenPos);\n}\n\n\n//Get spell dc of the avtor\nfunction getSpellDC(sourceActor) {\n    const spellDC = sourceActor?.system.attributes.spelldc;\n    return spellDC;\n}\n\n//Get the actor responsible for the template\nfunction getSourceActor(sourceTemplate) {\n    let sourceActor;\n    let sourceUuid = sourceTemplate?.getFlag(\"midi-qol\", \"originUuid\").split(\".\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = sourceTemplate?.getFlag(\"dnd5e\", \"origin\").split(\".\");\n    }\n\n    //hoping, that the actor id is on position 1 in the array\n    if (sourceUuid[0] === \"Actor\") {\n\n        sourceActor = game.actors.get(sourceUuid[1]);\n    }\n    return sourceActor;\n}\n"
      }
    },
    "core": {
      "sourceId": "Item.ndDEysapwBeQVaIT"
    },
    "exportSource": {
      "world": "eberron",
      "system": "dnd5e",
      "coreVersion": "12.331",
      "systemVersion": "3.3.1"
    },
    "dnd5e": {
      "migratedProperties": [
        "vocal",
        "somatic",
        "material"
      ]
    },
    "region-attacher": {
      "attachRegionToTemplate": true,
      "regionBehaviors": [
        {
          "name": "Snare Region Enter",
          "type": "executeScript",
          "_id": "mqgFA71ovENnBUuG",
          "system": {
            "events": [
              "tokenEnter"
            ],
            "source": "const displayFlairChatMessages = true;\nlet targetActor = event.data.token.actor;\nlet targetToken = event.data.token;\nlet effectData = chrisPremades.utils.effectUtils.getEffectByIdentifier(targetActor, 'snareTrapped');\nlet steppedIntoTrap = stepIntoTrap();\n\n\nasync function stepIntoTrap() {\n  let sourceActor = await getSourceActor();\n  if (!effectData) {\n    if (displayFlairChatMessages) {\n      //Create a chat message for flair\n      let cMessage = targetActor?.name + \" steppd on the magical trap of \" + sourceActor?.name + \"! Let's see what happens.\";\n      ChatMessage.create({ content: cMessage });\n    }\n    let invSkillCheckResult = await rollSkillCheck(targetActor, sourceActor?.system.attributes.spelldc);\n    if (!invSkillCheckResult) {\n      if (displayFlairChatMessages) {\n        let cMessage = targetActor?.name + \" did not achieve to pass the trap safely, falls prone and is pulled into the air.\";\n        ChatMessage.create({ content: cMessage });\n      }\n      let effectData = {\n        name: 'Snare Trapped',\n        origin: sourceActor.uuid,\n        img: 'icons/creatures/tentacles/tentacles-thing-green.webp',\n        flags: {\n          dae: {\n            showIcon: true\n          }\n        }\n      };\n\n      console.log(\"New Effect Data: \")\n      console.log(effectData);\n      chrisPremades.utils.effectUtils.createEffect(targetActor, effectData, {identifier: 'snareTrapped'});\n      chrisPremades.utils.effectUtils.applyConditions(targetActor, ['prone','restrained']);\n      const newElevation = targetToken.elevation + 3;\n      await targetToken.update({ elevation: newElevation });\n    } else {\n      if (displayFlairChatMessages) {\n        let cMessage = targetActor?.name + \" saved and walks therefore elegantly over the trap.\";\n        ChatMessage.create({ content: cMessage });\n      }\n    }\n  }\n}\n\nasync function rollSkillCheck(actor, spellDC) {\n  const skillCheck = await actor.rollSkill('inv');\n  if (skillCheck.total >= spellDC) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nasync function getSourceActor() {\n  let actor = await fromUuid(region.flags[\"region-attacher\"].actorUuid);\n  return actor;\n}"
          },
          "disabled": false,
          "flags": {},
          "_stats": {
            "compendiumSource": null,
            "duplicateSource": null,
            "coreVersion": "12.331",
            "systemId": "dnd5e",
            "systemVersion": "3.3.1",
            "createdTime": null,
            "modifiedTime": null,
            "lastModifiedBy": null
          }
        },
        {
          "name": "Snare Region Turn End",
          "type": "executeScript",
          "_id": "ArDCVtdY3DmozGot",
          "system": {
            "events": [
              "tokenTurnEnd"
            ],
            "source": "const displayFlairChatMessages = true;\nlet targetActor = event.data.token.actor;\nlet targetToken = event.data.token;\nlet snareEffectData = chrisPremades.utils.effectUtils.getEffectByIdentifier(targetActor, 'snareTrapped');\nlet proneEffect = chrisPremades.utils.effectUtils.getEffectByStatusID(targetActor, 'prone');\nlet restrainedEffect = chrisPremades.utils.effectUtils.getEffectByStatusID(targetActor, 'restrained');\nconsole.log(\"Prone:\");\nconsole.log(proneEffect);\nconsole.log(\"Restrained:\");\nconsole.log(restrainedEffect);\nlet escapedTrap = escapeTrap();\n\nasync function escapeTrap() {\n    let sourceActor = await getSourceActor();\n    if (snareEffectData) {\n        const escape = await foundry.applications.api.DialogV2.confirm({\n            window: { title: \"Snare Trap\" },\n            content: \"<p>Do you want to escape the snare trap?</p>\",\n            rejectClose: false,\n            modal: true\n        });\n        if (escape) {\n            if (displayFlairChatMessages) {\n                let cMessage = targetActor?.name + \" tries to get out of the trap.\";\n                ChatMessage.create({ content: cMessage });\n            }\n            let dexSave = await rollDexSaveDisadvantage(targetActor, sourceActor?.system.attributes.spelldc);\n            if (dexSave) {\n                if (displayFlairChatMessages) {\n                    let cMessage = targetActor?.name + \" achieved to get out of the magical trap of \" + sourceActor.name + \" and falls prone to the ground.\";\n                    ChatMessage.create({ content: cMessage });\n                    //Remove the snare trapped effect\n                    await  chrisPremades.utils.genericUtils.remove(snareEffectData);\n                    const newElevation = targetToken.elevation - 3;\n                    await targetToken.update({ elevation: newElevation });\n                    \n                    //Check and remove prone and restrained\n                    if ('prone') {\n                        await  chrisPremades.utils.genericUtils.remove(proneEffect); \n                    }\n                    if ('restrained') {\n                        await  chrisPremades.utils.genericUtils.remove(restrainedEffect); \n                    }\n                }\n            } else {\n                if (displayFlairChatMessages) {\n                    let cMessage = targetActor?.name + \" did not achieve to get out of the magical trap of \" + sourceActor.name + \" and still hangs in the air.\";\n                    ChatMessage.create({ content: cMessage });\n                }\n            }\n        }\n    }\n}\n\nasync function rollDexSaveDisadvantage(actor, spellDC) {\n    const dexSave = await actor.rollAbilitySave('dex', { disadvantage: true });\n    if (dexSave.total >= spellDC) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nasync function getSourceActor() {\n    let actor = await fromUuid(region.flags[\"region-attacher\"].actorUuid);\n    return actor;\n}"
          },
          "disabled": false,
          "flags": {},
          "_stats": {
            "compendiumSource": null,
            "duplicateSource": null,
            "coreVersion": "12.331",
            "systemId": "dnd5e",
            "systemVersion": "3.3.1",
            "createdTime": null,
            "modifiedTime": null,
            "lastModifiedBy": null
          }
        },
        {
          "name": "Snare Drop Spell",
          "type": "executeScript",
          "_id": "kylWb2aC2Ua9SVRg",
          "system": {
            "events": [
              "behaviorStatus"
            ],
            "source": "console.log(\"====================\");\nconsole.log(\"Snare Spell Dropped\");\nconsole.log(\"====================\");"
          },
          "disabled": false,
          "flags": {},
          "_stats": {
            "compendiumSource": null,
            "duplicateSource": null,
            "coreVersion": "12.331",
            "systemId": "dnd5e",
            "systemVersion": "3.3.1",
            "createdTime": null,
            "modifiedTime": null,
            "lastModifiedBy": null
          }
        }
      ]
    }
  },
  "_stats": {
    "compendiumSource": "Item.ndDEysapwBeQVaIT",
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "dnd5e",
    "systemVersion": "3.3.1",
    "createdTime": 1728345796862,
    "modifiedTime": 1728346114632,
    "lastModifiedBy": "B2BBHntfpytXE8DP"
  },
  "ownership": {
    "default": 0,
    "B2BBHntfpytXE8DP": 3
  },
  "_id": "MIR6mxzyH91lWVDF",
  "sort": 0,
  "_key": "!items!MIR6mxzyH91lWVDF"
}
